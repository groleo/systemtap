load_lib site.exp
load_lib "compile_flags.exp"

proc installtest_p {} {
    global TOOL_OPTIONS
    if {[info exists TOOL_OPTIONS] && [string match "*install*" $TOOL_OPTIONS]} {
        return 1
    } else { return 0 }
}


# only original rhel5/6-era utrace need apply
proc utrace_orig_p {} {
    set path "/proc/kallsyms"
    if {! [catch {exec grep -q utrace_attach $path} dummy]} {
	return 1
    }
    return 0
}


proc utrace_p {} {
    set path "/proc/kallsyms"
    # We've got 2 ways to provide utrace support:
    #
    # (1) Kernel built-in utrace (CONFIG_UTRACE).  Look for
    # 'utrace_attach'.
    if {! [catch {exec grep -q utrace_attach $path} dummy]} {
	return 1

    # (2) Tracepoint-based utrace.  Check for the set of 5 tracepoints
    # we need and task_work_add() (see
    # runtime/autoconf-utrace-via-tracepoints.c for details).
    } elseif {! [catch {exec grep -q tracepoint_sched_process_fork $path} dummy]
	      && ! [catch {exec grep -q tracepoint_sched_process_exit $path} dummy]
	      && ! [catch {exec grep -q tracepoint_sys_enter $path} dummy]
	      && ! [catch {exec grep -q tracepoint_sys_exit $path} dummy]

	      && ! [catch {exec grep -q tracepoint_sched_process_exec $path} dummy]
	      && ! [catch {exec grep -q task_work_add $path} dummy]} {
        return 1
    }
    return 0
}


proc uprobes_p {} {
    set path "/proc/kallsyms"
    # If this is a utrace kernel, then we can use our version of uprobes.
    # No need to build it now, stap will handle that itself.
    #
    # classical utrace?
    if {! [catch {exec grep -q utrace_attach $path} dummy]} {
	# Although ia64 has classical utrace, uprobes hasn't been
	# ported there (PR7081).
	if {[istarget ia64-*-*]} {
 	    return 0
	}
	return 1
    }

    # inode-uprobes or (unlikely compiled-in classical uprobes?)
    #
    # Note we're looking for " uprobe_register" to avoid finding
    # 'kallsyms_uprobe_register' from a loaded systemtap module.
    if {! [catch {exec grep -q register_uprobe $path} dummy]
	|| ! [catch {exec grep -q " uprobe_register" $path} dummy]} {
	return 1
    }
    return 0
}


proc uretprobes_p {} {
    set path "/proc/kallsyms"
    if {! [uprobes_p]} { return 0 }
    if {! [catch {exec grep -q uretprobe $path} dummy]} { return 1 }
    if {! [catch {exec grep -q utrace_attach $path} dummy]} { return 1 }
    return 0
}



proc dyninst_p {} {
    global systemtap_dyninst_p
    return $systemtap_dyninst_p
}

proc nss_p {} {
    global systemtap_nss_p
    return $systemtap_nss_p
}


proc get_runtime_list {} {
    # Always return the default runtime.
    set runtime_list [list ""]

    if {[dyninst_p]} {
	lappend runtime_list "dyninst"
    }
    return $runtime_list
}


proc print_systemtap_version {} {
    set version [exec /bin/uname -r]
    set location "/boot/vmlinux-$version"
    if {! [file exists $location]} {
	# try the debuginfo location
	set location "/usr/lib/debug/lib/modules/$version/vmlinux"
	if {! [file exists $location]} { set location "" }
    }

    print "kernel location: $location"
    print "kernel version: $version"

    set location [exec /usr/bin/which stap]
    regexp {version [^)]*} [exec stap -V 2>@ stdout] version

    print "systemtap location: $location"
    print "systemtap version: $version"

    set location [exec /usr/bin/which gcc]
    set version [exec gcc --version | head -1]

    print "gcc location: $location"
    print "gcc version: $version"
}


proc setup_systemtap_environment {} {
    global srcdir env server_pid logfile systemtap_dyninst_p systemtap_nss_p

    # need an absolute SRCDIR for the top-level src/ tree
    # XXX: or, we could change nearby uses of ${SRCDIR}/testsuite to ${SRCDIR}
    set env(SRCDIR) [fullpath $srcdir/..]

    # Use a local systemtap directory and cache.  Add user name so
    # make check and sudo make check don't clobber each other.
    set env(SYSTEMTAP_DIR) [exec pwd]/.systemtap-[exec whoami]
    exec mkdir -p $env(SYSTEMTAP_DIR)

    # Start with fresh server certificates
    exec rm -fr $env(SYSTEMTAP_DIR)/ssl

    # Remove the rc file
    exec rm -f $env(SYSTEMTAP_DIR)/rc

    # All hail the prophet lockdep
    set chan [open $env(SYSTEMTAP_DIR)/rc w]
    puts $chan "--modinfo intree=Y"
    puts $chan "-B CONFIG_DEBUG_INFO=Y"
    puts $chan "--rlimit-cpu=300"
    close $chan

    # Erase the old server log file.
    set logfile "[exec pwd]/server.log"
    if {[file exists $logfile]} then {
	exec rm -f $logfile;
    }
    # Create a new one and make sure it's world writable.
    exec touch $logfile
    exec chmod 666 $logfile

    # Zap any previous uprobes, if any
    catch { exec /sbin/rmmod uprobes }

    # No compile-server started yet.
    set server_pid 0

    # PATH, SYSTEMTAP_TAPSET, SYSTEMTAP_RUNTIME, LD_LIBRARY_PATH are already set.
    foreach var {PATH STAP SRCDIR SYSTEMTAP_TAPSET SYSTEMTAP_RUNTIME SYSTEMTAP_DIR LD_LIBRARY_PATH} {
        if [info exists env($var)] {
            verbose -log "env $var = $env($var)"
        }
    }

    # Remember if this very version of systemtap compiled with dyninst support
    if {! [catch {exec sh -c "stap -V 2>&1 | grep -q DYNINST"} dummy]} {
	set systemtap_dyninst_p 1
    } else {
        set systemtap_dyninst_p 0
    }

    # Remember if this selfsame version of systemtap compiled with nss support
    if {! [catch {exec sh -c "stap -V 2>&1 | grep -q NSS"} dummy]} {
        set systemtap_nss_p 1
    } else {
        set systemtap_nss_p 0
    }

    return 1
}

# Set up the environment so that tests will be performed using the systemtap
# client and server.
proc setup_server { args } {
    global srcdir env installed_stap logfile use_server avahi_ok_p

    # Start the server
    if {! [start_server $args]} then {
	return 0
    }

    # Make sure that stap can find the server.
    set use_server --use-server
    set res [catch { exec stap --list-servers=online,trusted,compatible >& stap-list-servers.out } looksee]
    verbose -log "stap --list-servers returned: res==$res"
    verbose -log $looksee[exec cat stap-list-servers.out]
    set res [catch { exec grep "^ host" stap-list-servers.out } looksee]
    verbose -log "grep for servers returned: res==$res\n$looksee"

    set avahi_ok_p 1
    if {$res != 0} then {
	verbose -log "Unable to automatically find the systemtap server -- check firewall settings for mDNS"
	set avahi_ok_p 0

	# Try to discover the port the server is listening on from the server
	# log.
	set res [catch { exec /bin/cat $logfile | awk "/^Systemtap Compile Server on port .* ready/ {print \$6}" } server_port]
	if {$res != 0} then {
	    verbose -log "Unable to discover the port used by the systemtap server"
	    shutdown_server
	    return 0
	}
	set server_spec [info hostname]:$server_port
	verbose -log "Client/Server tests will be run by contacting the server directly as $server_spec"

	# Make sure stap can contact the server directly
	set use_server --use-server=$server_spec
	set res [catch {exec stap $use_server -p2 -e {probe begin {exit()}}} looksee]
	if {$res != 0} then {
	    verbose -log "Unable to contact the server at $server_spec directly"
	    shutdown_server
	    return 0
	}
    }

    return 1
}

proc start_server { options } {
    global srcdir env server_pid installed_stap logfile

    if {! [nss_p]} { return 0 }

    # Server management scripts and data are installed if this is an
    # install test, otherwise there is some setup to do.
    # Make sure the server management scripts and tools are on the $PATH.
    if {! [installtest_p]} then {
	set env(PATH) "$srcdir/..:[exec pwd]/..:$env(PATH)"
        set installed_stap "[exec pwd]/../stap"
	set env(SYSTEMTAP_SERVER_SCRIPTS) "$srcdir/.."
    } else {
	set env(PATH) "$env(PKGLIBDIR):$env(PATH)"
        set installed_stap "$env(SYSTEMTAP_PATH)/stap"
	set env(SYSTEMTAP_SERVER_SCRIPTS) $env(PKGLIBDIR)
    }

    # Try to start the server.
    set status 0
    if {[catch {eval {exec env STAP_PR11197_OVERRIDE=1 \
		    env SYSTEMTAP_STAP=[exec which stap] stap-start-server \
		    --log=$logfile} $options} server_pid]} {
	if {[lindex $::errorCode 0] eq "CHILDSTATUS"} {
	    set status [lindex $::errorCode 2]
	}
    }
    verbose -log "output: $server_pid"
    if { "$server_pid" == "" || $status != 0 } then {
	verbose -log "Cannot start a systemtap server"
	set server_pid 0
	return 0
    } else {
	verbose -log "Started a systemtap server as PID==$server_pid"
    }

    return 1
}

proc shutdown_server {} {
    global server_pid
    if { $server_pid != 0 } then {
	verbose -log "Stopping the systemtap server with PID==$server_pid"
	exec stap-stop-server $server_pid
	set server_pid 0
    }

    foreach module [glob -nocomplain [exec pwd]/stap_*.ko] {
	exec /bin/rm -f $module
    }
    foreach sig [glob -nocomplain [exec pwd]/stap_*.ko.sgn] {
	exec /bin/rm -f $sig
    }
}


proc normalize_arch { arch } {
    if {$arch == "ppc64"} then {return "powerpc"}
    if {$arch == "s390x"} then {return "s390"}
    if {$arch == "i686"} then {return "i386"}
    if {$arch == "armv5tel"} then {return "arm"}
    if {$arch == "armv7l"} then {return "arm"}
    if {$arch == "armv7lh"} then {return "arm"}
    return $arch
}

proc fullpath { path } {
    if {[string index $path 0] != "/"} then {
        # relative paths are anchored to the current directory
        return [pwd]/$path
    } else {
        return $path
    }
}

proc get_system_info {} {
    global Host Snapshot Distro GCC_Version env SElinux

    set Host [exec /bin/uname -a]
    if [file exists ../SNAPSHOT] {
	set Snapshot [exec /bin/cat ../SNAPSHOT]
    } elseif [file exists $env(SRCDIR)/../SNAPSHOT] {
	set Snapshot [exec /bin/cat $env(SRCDIR)/../SNAPSHOT]
    } else {
        regexp {version [^)]*} [exec stap -V 2>@ stdout] version
        set Snapshot $version
    }
    set Distro "Linux"
    if [file exists /usr/bin/lsb_release] {
        # this produces one line of this format:
        # Distribution:\tSTRING
        set Distro [lrange [exec /usr/bin/lsb_release -d] 1 end]
    } else {
        foreach f {/etc/fedora-release /etc/enterprise-release /etc/redhat-release /etc/suse-release /etc/debian_version} {
            if [file exists $f] then {set Distro [exec /bin/cat $f]; break }
        }
    }
    # Easily parsable version first major minor patch level
    set n [exec echo "__GNUC__ __GNUC_MINOR__ __GNUC_PATCHLEVEL__" | cpp -P]
    set n [string map {" " "."} $n]
    set n [string map {"\n" ""} $n]
    # Plus full version between square brackets.
    set full [exec gcc --version | head -1]
    set GCC_Version "$n \[$full\]"
    # selinux status
    if [file exists /usr/sbin/getenforce] {
        set SElinux [exec /usr/sbin/getenforce]
    } else {
        set SElinux "unknown"
    }
}

if {! [setup_systemtap_environment]} then {
    cleanup
    exit 1
}

print_systemtap_version
get_system_info

# PR11798: die if kernel-devel is not sufficient to build any modules
if {[catch {exec stap -p4 -e {probe begin {exit()}}} result]} {
    puts "\n\n\n**** failed systemtap kernel-devel smoke test:\n"
    puts $result
#    puts "****\n"
#    puts $options
    puts "\n**** aborting testing.\n"
    cleanup
    exit 1
}

# PR11798: die also if kernel-debuginfo is not available
# NB: if one introduced a [kernel_debuginfo_p] proc like the
# ones for uprobes/utrace above, and sprinkled it throughout,
# then this wouldn't have to be a failing condition.
# Note the --skip-badvars -w, we just care there is some debuginfo,
# it is allowed have bad var location descriptors (which will cause
# some tests to fail of course). Just test -p2, kernel-devel smoke
# test above does a full module build, we don't need another one.
if {[catch {exec stap --skip-badvars -w -p2 -e {probe syscall.open {println (argstr)}}} result]} {
    puts "\n\n\n**** failed systemtap kernel-debuginfo smoke test:\n"
    puts $result
#    puts "****\n"
#    puts $options
    puts "\n**** aborting testing.\n"
    cleanup
    exit 1
}

# Make sure all development packages for the supported ABIs (-m64 -m32/-m31)
# are installed by building a quick hello.c and hello.cxx program with both.
set source "hello.c"
set hello_file [open $source "w"]
puts $hello_file "#include <stdio.h>"
puts $hello_file "int main () { printf(\"Hello World!\"); return 0; }"
close $hello_file
for {set i 0} {$i < [arch_compile_flags]} {incr i} {
  set flags "additional_flags=-g compiler=gcc [arch_compile_flag $i]"
  set exe "hello-[arch_compile_flag_name $i]"
  set result [target_compile $source $exe executable $flags]
  if { $result != "" } {
    puts "\n\n\n**** failed gcc [arch_compile_flag_name $i] smoke test:\n"
    puts $result
    puts "Please install libgcc and glibc development packages for [arch_compile_flag_name $i]\n"
    puts "\n**** aborting testing.\n"
    cleanup
    exit 1
  }
}
set source "hello.cxx"
set hello_file [open $source "w"]
puts $hello_file "#include <iostream>"
puts $hello_file "using namespace std;"
puts $hello_file "int main () { cout << \"Hello World!\" << endl; return 0; }"
close $hello_file
for {set i 0} {$i < [arch_compile_flags]} {incr i} {
  set flags "additional_flags=-g compiler=g++ [arch_compile_flag $i]"
  set exe "hello-[arch_compile_flag_name $i]"
  set result [target_compile $source $exe executable $flags]
  if { $result != "" } {
    puts "\n\n\n**** failed g++ [arch_compile_flag_name $i] smoke test:\n"
    puts $result
    puts "Please install libstdc++-devel package for [arch_compile_flag_name $i]\n"
    puts "\n**** aborting testing.\n"
    cleanup
    exit 1
  }
}
catch { eval [list exec rm -f] [glob "hello.c*" "hello-*"] }

proc systemtap_init {args} {}
proc systemtap_version {} {}

proc cleanup {} {
    # Stop the stap server, if we started it.
    shutdown_server
}


proc stap_run_batch {filename args} {
    verbose -log "starting $filename $args"

    # Many of our test cases use "#! stap ...".  Since these lack
    # /full/paths, they are not really executable.  (We can't have
    # /full/paths because the choice of systemtap interpreter is set
    # at "make check" time.)

    # So we cheat.  If the file begins with "#! stap", we will spawn
    # stap manually here (relying on $PATH).  Otherwise, we presume
    # the file properly executable.

    set file [open $filename r]
    set firstbits [gets $file]
    close $file
    if [regexp -line {\#! stap (.*)} $firstbits -> stap_args] {
        verbose -log "spawn1 stap $stap_args $filename $args"
        # Make sure we don't accidentially add an extra empty argument.
        if {$args == ""} {
            spawn stap $stap_args $filename
        } else {
            spawn stap $stap_args $filename $args
        }
    } else {
        verbose -log "spawn2 $filename $args"
        # Make sure we don't accidentially add an extra empty argument.
        if {$args == ""} {
            spawn $filename
        } else {
            spawn $filename $args
        }
    }

    expect {
	-timeout -1
        -re {[^\r]*\r} { verbose -log $expect_out(0,string); exp_continue }
        eof { }
    }
    set results [wait]
    verbose -log "wait results: $results"
    if {[llength $results] >= 5} {
	# Unexpected output. stap must have crashed
	return -1
    } else {
	return [lindex $results 3]
    }
}

proc as_root { command } {

     set effective_pid [exec /usr/bin/id -u]

     if {$effective_pid != 0} {
	 set command "sudo $command"
     }
     verbose -log "as_root $command"
     set res [catch {eval exec $command} value]
     verbose -log "OUT $value"
     verbose -log "RC $res"
     return  $res
 }

proc as_non_root { command } {

     set effective_pid [exec /usr/bin/id -u]

     if {$effective_pid == 0} {
       set command "su -s /bin/sh [exec logname] -c \"$command\""
     }
     verbose -log "as_non_root $command"
     set res [catch {eval exec $command} value]
     verbose -log "OUT $value"
     verbose -log "RC $res"
     return  $res
}

proc sdt_includes {} {
  global srcdir env

  # The wrapper sys/sdt.h for testing STAP_SDT_V[12] is here.
  set dirs [list $srcdir]

  if {[installtest_p]} {
    # Use the installed <sys/sdt.h>.
    lappend dirs $env(SYSTEMTAP_INCLUDES)
  } else {
    # Find <sys/sdt.h> in the source tree.
    lappend dirs $srcdir/../includes
    # The uninstalled, configured sdt-config.h has to be found here.
    lappend dirs ../includes/sys
  }

  set flags ""
  foreach dir $dirs {
      set flags "$flags additional_flags=-isystem${dir}"
  }

  return $flags
}

proc stripped_p { EXE } {
    if { [catch {eval exec "file $EXE | grep -q \"not stripped\""} dummy] } {
	return 1
    }
    return 0
}
