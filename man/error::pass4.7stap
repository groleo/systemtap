.\" t
.TH ERROR::PASS4 7stap 
.SH NAME
error::pass4 \- systemtap pass-4 errors

.SH DESCRIPTION
Errors that occur during pass 4 (compilation) have generally only a few
causes:

.TP
kernel or OS version changes
The systemtap runtime and embedded-C fragments in the tapset library
are designed to be portable across a wide range of OS versions.  However,
incompatibilities can occur when some OS changes occur, such as kernel
modifications that change functions, types, or macros referenced 
by systemtap.  Upstream builds of systemtap are often quickly updated to 
include relevant fixes, so try getting or making an updated build.
If the issue persists, report the problem to the systemtap developers.

.TP
buggy embedded-C code
Embedded-C code in your own guru-mode script cannot be checked by systemtap,
and is passed through verbatim to the compiler.  Errors in such snippets of
code may be found during the pass-4 compiler invocation, though may be hard
to identify by the compiler errors.

.TP
incompatible embedded-C code
The interface standards between systemtap-generated code and embedded-C code
occasionally change.  For example, before version 1.8, arguments were passed
using macros
.IR THIS->foo " and " THIS->__retvalue
but from version 1.8 onward, using
.IR STAP_ARG_foo " and " STAP_RETVALUE "."
Adjust your embedded-C code to current standards, or use the
.IR "stap --compatible=VERSION"
option to make systemtap use a different one.

.SH GATHERING MORE INFORMATION
It may be necessary to run systemtap with 
.IR -k " or " -p3
to examine the generated C code.  Increasing the verbosity of pass-4
with an option such as
.IR "--vp 0001"
can also help pinpoint the problem.

.SH SEE ALSO
.IR stap (1),
.IR error::reporting (7stap)
